#
# output_file_name_test_loglike = paste(paste("lda_M_hmc_test_loglike", M, sep=""),".csv", sep="")
# write.csv(extract(fitlda)$test_loglike, output_file_name_test_loglike, row.names = F, quote = F)
# print(summary(extract(fitlda)$test_loglike))
#
ldam = stan_model(file = 'lda_standard.stan', verbose = TRUE)
source(data_file_name)
output_file_csv = paste(paste("lda_M_vb", M, sep=""),"output.csv", sep="")
ldafit = vb(ldam, data = list(K = K, V = V, M = M, N = N,
w = w, doc = doc, alpha = alpha, beta = beta), tol_rel_obj = 1e-4,
sample_file = output_file_csv)
phifit = extract(ldafit)$phi
# topic_word_dist_vb = truephi
# for(i in 1:K){
#   temp = cbind(phifit[,i,], rep(i, 1000))
#   topic_word_dist_vb = rbind(topic_word_dist_vb, temp)
# }
output_file_name = paste(paste("lda_M_vb", M, sep=""),"phi_output.csv", sep="")
write.csv (phifit, output_file_name, row.names = F, quote = F)
# output_file_name_kl = paste(paste("lda_M_vb_kl", M, sep=""),".csv", sep="")
# klphi=sapply(1:1000, function(i) mean(diag(matrix(kl_lda(truephi0,phifit[i,,]),K))))
#
# #extract(ldafit)$
# write.csv(klphi, output_file_name_kl, row.names = F, quote = F)
# print(summary(klphi))
# output_file_name_test_loglike = paste(paste("lda_M_vb_test_loglike", M, sep=""),".csv", sep="")
# write.csv(extract(ldafit)$test_loglike, output_file_name_test_loglike, row.names = F, quote = F)
# print(summary(extract(ldafit)$test_loglike))
}
ldafit = vb(ldam, data = list(K = K, V = V, M = M, N = N,
w = w, doc = doc, alpha = alpha, beta = beta), tol_rel_obj = 1e-3,
sample_file = output_file_csv)
ldam = stan_model(file = 'lda_standard.stan', verbose = TRUE)
source(data_file_name)
output_file_csv = paste(paste("lda_M_vb", M, sep=""),"output.csv", sep="")
ldafit = vb(ldam, data = list(K = K, V = V, M = M, N = N,
w = w, doc = doc, alpha = alpha, beta = beta), tol_rel_obj = 1e-3,
sample_file = output_file_csv)
alpha
beta
beta <- rep(1/V,V);
phi <- rdirichlet(K,beta);
dump(c("phi"), "truephi.data.R")
phi = phi
truephi0 = phi
source("truephi.data.R")
phi <- rdirichlet(K,beta);
dump(c("phi"), "truephi.data.R")
phi = phi
truephi0 = phi
source("truephi.data.R")
#M <- 100;  # docs
doc_length <- rpois(M,avg_doc_length);
N <- sum(doc_length);
theta <- rdirichlet(M,alpha); #local variables, topic dist per doc
#global variables, word dist per topic
w <- rep(NA,N);
doc <- rep(NA,N);
n <- 1;
for (m in 1:M) {
for (i in 1:doc_length[m]) {
z <- which(rmultinom(1,1,theta[m,]) == 1);
w[n] <- which(rmultinom(1,1,phi[z,]) == 1);
doc[n] <- m;
n <- n + 1;
}
}
# alpha <- rep(1/K,K);
# beta <- rep(1/V,V);
#truephi = cbind(truephi0, rep(0, K))
# test_theta = rdirichlet(test_M,alpha);
data_file_name = paste(paste("lda_M", M, sep=""),".data.R", sep="")
dump(c("K","V","M","N","z","w","doc","alpha","beta", "theta","phi"), data_file_name)#,,"truephi0"
#"test_M", "test_N", "test_doc", "test_w", "test_theta"),data_file_name)
output_file_csv = paste(paste("lda_M_hmc", M, sep=""),"output.csv", sep="")
#
#
fitlda = stan(file = 'lda_standard.stan', data = list(K = K, V = V, M = M, N = N,
w = w, doc = doc, alpha = alpha, beta = beta),iter = 4000, chains = 1, sample_file = output_file_csv)
#  , truephi0=truephi0
#  test_M=test_M, test_N=test_N, test_w=test_w, test_doc=test_doc,test_theta=test_theta),
phifit = extract(fitlda)$phi
output_file_name = paste(paste("lda_M_hmc", M, sep=""),"phi_output.csv", sep="")
write.csv (phifit, output_file_name, row.names = F, quote = F)
# klphi=sapply(1:1000, function(i) mean(diag(matrix(kl_lda(truephi0,phifit[i,,]),K))))
#
# output_file_name_kl = paste(paste("lda_M_hmc_kl", M, sep=""),".csv", sep="")
# write.csv(klphi, output_file_name_kl, row.names = F, quote = F)
# print(summary(klphi))
# extract(fitlda)$
#
# output_file_name_test_loglike = paste(paste("lda_M_hmc_test_loglike", M, sep=""),".csv", sep="")
# write.csv(extract(fitlda)$test_loglike, output_file_name_test_loglike, row.names = F, quote = F)
# print(summary(extract(fitlda)$test_loglike))
#
ldam = stan_model(file = 'lda_standard.stan', verbose = TRUE)
source(data_file_name)
output_file_csv = paste(paste("lda_M_vb", M, sep=""),"output.csv", sep="")
ldafit = vb(ldam, data = list(K = K, V = V, M = M, N = N,
w = w, doc = doc, alpha = alpha, beta = beta), tol_rel_obj = 1e-3,
sample_file = output_file_csv)
alpha
beta
avg_doc_length <- 100;
alpha <- c(rep(1/K,K));#, rep(0.5, K0-K));
beta <- rep(1,V);
phi <- rdirichlet(K,beta);
dump(c("phi"), "truephi.data.R")
phi = phi
truephi0 = phi
source("truephi.data.R")
M
doc_length <- rpois(M,avg_doc_length);
N <- sum(doc_length);
theta <- rdirichlet(M,alpha); #local variables, topic dist per doc
#global variables, word dist per topic
w <- rep(NA,N);
doc <- rep(NA,N);
n <- 1;
for (m in 1:M) {
for (i in 1:doc_length[m]) {
z <- which(rmultinom(1,1,theta[m,]) == 1);
w[n] <- which(rmultinom(1,1,phi[z,]) == 1);
doc[n] <- m;
n <- n + 1;
}
}
# alpha <- rep(1/K,K);
# beta <- rep(1/V,V);
#truephi = cbind(truephi0, rep(0, K))
# test_theta = rdirichlet(test_M,alpha);
data_file_name = paste(paste("lda_M", M, sep=""),".data.R", sep="")
dump(c("K","V","M","N","z","w","doc","alpha","beta", "theta","phi"), data_file_name)#,,"truephi0"
#"test_M", "test_N", "test_doc", "test_w", "test_theta"),data_file_name)
output_file_csv = paste(paste("lda_M_hmc", M, sep=""),"output.csv", sep="")
#
#
#
ldam = stan_model(file = 'lda_standard.stan', verbose = TRUE)
source(data_file_name)
output_file_csv = paste(paste("lda_M_vb", M, sep=""),"output.csv", sep="")
ldafit = vb(ldam, data = list(K = K, V = V, M = M, N = N,
w = w, doc = doc, alpha = alpha, beta = beta), tol_rel_obj = 1e-3,
sample_file = output_file_csv)
alpha <- c(rep(1,K));#, rep(0.5, K0-K));
beta <- rep(1,V);
phi <- rdirichlet(K,beta);
dump(c("phi"), "truephi.data.R")
phi = phi
truephi0 = phi
source("truephi.data.R")
doc_length <- rpois(M,avg_doc_length);
N <- sum(doc_length);
theta <- rdirichlet(M,alpha); #local variables, topic dist per doc
#global variables, word dist per topic
w <- rep(NA,N);
doc <- rep(NA,N);
n <- 1;
for (m in 1:M) {
for (i in 1:doc_length[m]) {
z <- which(rmultinom(1,1,theta[m,]) == 1);
w[n] <- which(rmultinom(1,1,phi[z,]) == 1);
doc[n] <- m;
n <- n + 1;
}
}
# alpha <- rep(1/K,K);
# beta <- rep(1/V,V);
#truephi = cbind(truephi0, rep(0, K))
# test_theta = rdirichlet(test_M,alpha);
data_file_name = paste(paste("lda_M", M, sep=""),".data.R", sep="")
dump(c("K","V","M","N","z","w","doc","alpha","beta", "theta","phi"), data_file_name)#,,"truephi0"
#"test_M", "test_N", "test_doc", "test_w", "test_theta"),data_file_name)
ldam = stan_model(file = 'lda_standard.stan', verbose = TRUE)
source(data_file_name)
output_file_csv = paste(paste("lda_M_vb", M, sep=""),"output.csv", sep="")
ldafit = vb(ldam, data = list(K = K, V = V, M = M, N = N,
w = w, doc = doc, alpha = alpha, beta = beta), tol_rel_obj = 1e-3,
sample_file = output_file_csv)
phifit = extract(ldafit)$phi
setwd("~/Documents/OneDrive - University of North Carolina at Chapel Hill/STAT Program/2020 Spring/STOR 757/Project/Code")
library("gtools");  # for rdirichlet
library("rstan")
library(parallel)
#options(mc.cores = detectCores() - 1)
library(ggplot2)
args = commandArgs(trailingOnly=TRUE)
M <- args[1] # number of tarining documents
V <- 100; # words: river, stream, bank, money, loan
#K0 <- 10; # topics: RIVER, BANK
K = 10 # number of topics we fit
avg_doc_length <- 100;
alpha <- c(rep(1,K));#, rep(0.5, K0-K));
beta <- rep(1,V);
phi <- rdirichlet(K,beta);
dump(c("phi"), "truephi.data.R")
phi = phi
truephi0 = phi
source("truephi.data.R")
# # create test data
# test_M = 1000
# doc_length <- rpois(test_M,avg_doc_length);
# test_N <- sum(doc_length);
# theta <- rdirichlet(test_M,alpha); # local variables, topic dist per doc
# #global variables, word dist per topic
# test_w <- rep(NA,test_N);
# test_doc <- rep(NA,test_N);
# n <- 1;
# for (m in 1:test_M) {
#   for (i in 1:doc_length[m]) {
#     z <- which(rmultinom(1,1,theta[m,]) == 1);
#     test_w[n] <- which(rmultinom(1,1,phi[z,]) == 1);
#     test_doc[n] <- m;
#     n <- n + 1;
#   }
# }
for (M in c(10,20,50,100,200,500,1000)){
#M <- 100;  # docs
doc_length <- rpois(M,avg_doc_length);
N <- sum(doc_length);
theta <- rdirichlet(M,alpha); #local variables, topic dist per doc
#global variables, word dist per topic
w <- rep(NA,N);
doc <- rep(NA,N);
n <- 1;
for (m in 1:M) {
for (i in 1:doc_length[m]) {
z <- which(rmultinom(1,1,theta[m,]) == 1);
w[n] <- which(rmultinom(1,1,phi[z,]) == 1);
doc[n] <- m;
n <- n + 1;
}
}
# alpha <- rep(1/K,K);
# beta <- rep(1/V,V);
#truephi = cbind(truephi0, rep(0, K))
# test_theta = rdirichlet(test_M,alpha);
data_file_name = paste(paste("lda_M", M, sep=""),".data.R", sep="")
dump(c("K","V","M","N","z","w","doc","alpha","beta", "theta","phi"), data_file_name)#,,"truephi0"
#"test_M", "test_N", "test_doc", "test_w", "test_theta"),data_file_name)
output_file_csv = paste(paste("lda_M_hmc", M, sep=""),"output.csv", sep="")
#
#
#
#
fitlda = stan(file = 'lda_standard.stan', data = list(K = K, V = V, M = M, N = N,
w = w, doc = doc, alpha = alpha, beta = beta),iter = 4000, chains = 1, sample_file = output_file_csv)
#  , truephi0=truephi0
#  test_M=test_M, test_N=test_N, test_w=test_w, test_doc=test_doc,test_theta=test_theta),
phifit = extract(fitlda)$phi
# topic_word_dist_hmc = truephi
# for(i in 1:K){
#   temp = cbind(phifit[,i,], rep(i, 2000))
#   topic_word_dist_hmc = rbind(topic_word_dist_hmc, temp)
# }
output_file_name = paste(paste("lda_M_hmc", M, sep=""),"phi_output.csv", sep="")
write.csv (phifit, output_file_name, row.names = F, quote = F)
# klphi=sapply(1:1000, function(i) mean(diag(matrix(kl_lda(truephi0,phifit[i,,]),K))))
#
# output_file_name_kl = paste(paste("lda_M_hmc_kl", M, sep=""),".csv", sep="")
# write.csv(klphi, output_file_name_kl, row.names = F, quote = F)
# print(summary(klphi))
# extract(fitlda)$
#
# output_file_name_test_loglike = paste(paste("lda_M_hmc_test_loglike", M, sep=""),".csv", sep="")
# write.csv(extract(fitlda)$test_loglike, output_file_name_test_loglike, row.names = F, quote = F)
# print(summary(extract(fitlda)$test_loglike))
#
ldam = stan_model(file = 'lda_standard.stan', verbose = TRUE)
source(data_file_name)
output_file_csv = paste(paste("lda_M_vb", M, sep=""),"output.csv", sep="")
ldafit = vb(ldam, data = list(K = K, V = V, M = M, N = N,
w = w, doc = doc, alpha = alpha, beta = beta), tol_rel_obj = 1e-3,
sample_file = output_file_csv)
phifit = extract(ldafit)$phi
# topic_word_dist_vb = truephi
# for(i in 1:K){
#   temp = cbind(phifit[,i,], rep(i, 1000))
#   topic_word_dist_vb = rbind(topic_word_dist_vb, temp)
# }
output_file_name = paste(paste("lda_M_vb", M, sep=""),"phi_output.csv", sep="")
write.csv (phifit, output_file_name, row.names = F, quote = F)
# output_file_name_kl = paste(paste("lda_M_vb_kl", M, sep=""),".csv", sep="")
# klphi=sapply(1:1000, function(i) mean(diag(matrix(kl_lda(truephi0,phifit[i,,]),K))))
#
# #extract(ldafit)$
# write.csv(klphi, output_file_name_kl, row.names = F, quote = F)
# print(summary(klphi))
# output_file_name_test_loglike = paste(paste("lda_M_vb_test_loglike", M, sep=""),".csv", sep="")
# write.csv(extract(ldafit)$test_loglike, output_file_name_test_loglike, row.names = F, quote = F)
# print(summary(extract(ldafit)$test_loglike))
}
setwd("~/Documents/OneDrive - University of North Carolina at Chapel Hill/STAT Program/2020 Spring/STOR 757/Project/Code")
# kl_hmc_1=read.csv("lda_M_hmc_kl10.csv")
# kl_hmc_2=read.csv("lda_M_hmc_kl20.csv")
# kl_hmc_3=read.csv("lda_M_hmc_kl50.csv")
#
# kl_vb_1=read.csv("lda_M_vb_kl10.csv")
# kl_vb_2=read.csv("lda_M_vb_kl20.csv")
# kl_vb_3=read.csv("lda_M_vb_kl50.csv")
#
# boxplot(cbind(kl_hmc_1,kl_vb_1,kl_hmc_2,kl_vb_2,kl_hmc_3,kl_vb_3))
kl_lda <-function(truephi0,phi){
# vector<lower=0>[K] klphi[K];
# real temp;
klphi=matrix(0,K,K)
temp = 0;
for (i in 1:K){
for (j in 1:K){
temp = 0;
for (k in 1:V){
temp = temp + truephi0[j,k] * log(truephi0[j,k]) - truephi0[j,k] * log(phi[i,k]);
}
klphi[i,j] = temp;
}
}
return(klphi)
}
phifit_vb_1=read.csv("lda_M_vb10phi_output.csv")
phifit_vb_2=read.csv("lda_M_vb20phi_output.csv")
phifit_vb_3=read.csv("lda_M_vb50phi_output.csv")
phifit_vb_4=read.csv("lda_M_vb100phi_output.csv")
phifit_hmc_1=read.csv("lda_M_hmc10phi_output.csv")
phifit_hmc_2=read.csv("lda_M_hmc20phi_output.csv")
phifit_hmc_3=read.csv("lda_M_hmc50phi_output.csv")
phifit_hmc_4=read.csv("lda_M_hmc100phi_output.csv")
# plot b for topic 2; Box plot
kl_t2_vb = matrix(0,1000,4)
kl_t2_hmc = matrix(0,2000,4)
# plot a for 10 topics mean KL
kl_vb = matrix(0,10,4)
kl_hmc = matrix(0,10,4)
#matrix(phifit_vb_4[1,],K,V) == phifit[1,,]
source("truephi.data.R")
truephi0 = phi
K=10
V=100
kl_vb_1 = sapply(1:1000, function(i) diag(matrix(kl_lda(truephi0,matrix(unlist(phifit_vb_1[i,]),K,V) ),K)) )
kl_vb_2 = sapply(1:1000, function(i) diag(matrix(kl_lda(truephi0,matrix(unlist(phifit_vb_2[i,]),K,V)),K)) )
kl_vb_3 = sapply(1:1000, function(i) diag(matrix(kl_lda(truephi0,matrix(unlist(phifit_vb_3[i,]),K,V)),K)) )
kl_vb_4 = sapply(1:1000, function(i) diag(matrix(kl_lda(truephi0,matrix(unlist(phifit_vb_4[i,]),K,V)),K)) )
kl_hmc_1 = sapply(1:2000, function(i) diag(matrix(kl_lda(truephi0,matrix(unlist(phifit_hmc_1[i,]),K,V) ),K)) )
kl_hmc_2 = sapply(1:2000, function(i) diag(matrix(kl_lda(truephi0,matrix(unlist(phifit_hmc_2[i,]),K,V) ),K)) )
kl_hmc_3 = sapply(1:2000, function(i) diag(matrix(kl_lda(truephi0,matrix(unlist(phifit_hmc_3[i,]),K,V) ),K)) )
knitr::opts_chunk$set(echo = TRUE)
setwd("~/Documents/OneDrive - University of North Carolina at Chapel Hill/STAT Program/2020 Spring/STOR 757/Project/Code")
phifit_vb_1=read.csv("lda_M_vb10phi_output.csv")
phifit_vb_2=read.csv("lda_M_vb20phi_output.csv")
phifit_vb_3=read.csv("lda_M_vb50phi_output.csv")
phifit_vb_4=read.csv("lda_M_vb100phi_output.csv")
phifit_vb_5=read.csv("lda_M_vb200phi_output.csv")
phifit_vb_6=read.csv("lda_M_vb500phi_output.csv")
phifit_vb_7=read.csv("lda_M_vb1000phi_output.csv")
phifit_hmc_1=read.csv("lda_M_hmc10phi_output.csv")
phifit_hmc_2=read.csv("lda_M_hmc20phi_output.csv")
phifit_hmc_3=read.csv("lda_M_hmc50phi_output.csv")
phifit_hmc_4=read.csv("lda_M_hmc100phi_output.csv")
phifit_hmc_5=read.csv("lda_M_hmc200phi_output.csv")
phifit_hmc_6=read.csv("lda_M_hmc500phi_output.csv")
phifit_hmc_7=read.csv("lda_M_hmc1000phi_output.csv")
kl_lda <-function(truephi0,phi){
# vector<lower=0>[K] klphi[K];
# real temp;
klphi=matrix(0,K,K)
temp = 0;
for (i in 1:K){
for (j in 1:K){
temp = 0;
for (k in 1:V){
temp = temp + truephi0[j,k] * log(truephi0[j,k]) - truephi0[j,k] * log(phi[i,k]);
}
klphi[i,j] = temp;
}
}
return(klphi)
}
# plot b for topic 2; Box plot
kl_t2_vb = matrix(0,1000,7)
kl_t2_hmc = matrix(0,2000,7)
# plot a for 10 topics mean KL
kl_vb = matrix(0,10,7)
kl_hmc = matrix(0,10,7)
#matrix(phifit_vb_4[1,],K,V) == phifit[1,,]
source("truephi.data.R")
truephi0 = phi
K=10
V=100
kl_vb_1 = sapply(1:1000, function(i) diag(matrix(kl_lda(truephi0,matrix(unlist(phifit_vb_1[i,]),K,V) ),K)) )
kl_vb_2 = sapply(1:1000, function(i) diag(matrix(kl_lda(truephi0,matrix(unlist(phifit_vb_2[i,]),K,V)),K)) )
kl_vb_3 = sapply(1:1000, function(i) diag(matrix(kl_lda(truephi0,matrix(unlist(phifit_vb_3[i,]),K,V)),K)) )
kl_vb_4 = sapply(1:1000, function(i) diag(matrix(kl_lda(truephi0,matrix(unlist(phifit_vb_4[i,]),K,V)),K)) )
kl_vb_5 = sapply(1:1000, function(i) diag(matrix(kl_lda(truephi0,matrix(unlist(phifit_vb_5[i,]),K,V)),K)) )
kl_vb_6 = sapply(1:1000, function(i) diag(matrix(kl_lda(truephi0,matrix(unlist(phifit_vb_6[i,]),K,V)),K)) )
kl_vb_7 = sapply(1:1000, function(i) diag(matrix(kl_lda(truephi0,matrix(unlist(phifit_vb_7[i,]),K,V)),K)) )
kl_hmc_1 = sapply(1:2000, function(i) diag(matrix(kl_lda(truephi0,matrix(unlist(phifit_hmc_1[i,]),K,V) ),K)) )
kl_hmc_2 = sapply(1:2000, function(i) diag(matrix(kl_lda(truephi0,matrix(unlist(phifit_hmc_2[i,]),K,V) ),K)) )
kl_hmc_3 = sapply(1:2000, function(i) diag(matrix(kl_lda(truephi0,matrix(unlist(phifit_hmc_3[i,]),K,V) ),K)) )
kl_hmc_4 = sapply(1:2000, function(i) diag(matrix(kl_lda(truephi0,matrix(unlist(phifit_hmc_4[i,]),K,V) ),K)) )
kl_hmc_5 = sapply(1:2000, function(i) diag(matrix(kl_lda(truephi0,matrix(unlist(phifit_hmc_5[i,]),K,V) ),K)) )
kl_hmc_6 = sapply(1:2000, function(i) diag(matrix(kl_lda(truephi0,matrix(unlist(phifit_hmc_6[i,]),K,V) ),K)) )
kl_hmc_7 = sapply(1:2000, function(i) diag(matrix(kl_lda(truephi0,matrix(unlist(phifit_hmc_7[i,]),K,V) ),K)) )
t=2
kl_t2_hmc= c(kl_hmc_1[t,],kl_hmc_2[t,],kl_hmc_3[t,],kl_hmc_4[t,],kl_hmc_5[t,],kl_hmc_6[t,],kl_hmc_7[t,])
kl_t2_vb= c(kl_vb_1[t,],kl_vb_2[t,],kl_vb_3[t,],kl_vb_4[t,],kl_vb_5[t,],kl_vb_6[t,],kl_vb_7[t,])
temp_list = list(kl_hmc_1,kl_hmc_2,kl_hmc_3, kl_hmc_4, kl_hmc_5, kl_hmc_6, kl_hmc_7)
temp = lapply(temp_list, function(x) apply(x,1,mean) )
kl_hmc = matrix(unlist(temp),10)
temp_list = list(kl_vb_1,kl_vb_2,kl_vb_3, kl_vb_4, kl_vb_5, kl_vb_6, kl_vb_7)
temp = lapply(temp_list, function(x) apply(x,1,mean) )
kl_vb = matrix(unlist(temp),10)
#klphi_temp=sapply(1:1000, function(i) kl_lda(truephi0,phifit[i,,]) )
library(ggplot2)
KL_mean<-c(kl_hmc,kl_vb)
group<-(c(rep(c(10,20,50,100,200,500,1000), each=10),rep(c(10,20,50,100,200,500,1000), each=10)))
#
topic=as.character(c(rep(1:10,7),rep(11:20,7)))#c(rep(1:10,8)))
method<-c(rep("HMC", each = 70),rep("MFVB",each=70))
df.a <- data.frame(KL_mean,group,method,topic)
names(df.a)<-c("KL","M","Algo","Topic")
pa<-ggplot(data=df.a, aes(x=M,y=KL,fill=Topic,colour=Algo)) + geom_line(size = 1.5) + geom_point(size = 2) + scale_x_continuous(breaks=c(10,20,50,100,200,500,1000))  + scale_color_manual(values=c("lightskyblue2", "dodgerblue4")) + theme_light() + theme(legend.position = "none")#rep("#56B4E9",10), rep("#E69F00",10)))
KL<-c(kl_t2_hmc,kl_t2_vb)
group=c(rep(c("10","20","50","100","200","500","1000"), each=2000),rep(c("10","20","50","100","200","500","1000"), each=1000))
method<-c(rep("HMC", each = 7*2000),rep("MFVB",each=7*1000))
data<-data.frame(KL,group,method)
names(data)<-c("KL","M","Algo")
data$M <- factor(group,levels = c("10","20","50","100","200","500","1000"))
pb<-ggplot(data=data, aes(x=M,y=KL,fill=method)) + geom_boxplot()  + scale_fill_manual(values=c("lightskyblue2","dodgerblue4" ) ) + theme_light()
require(gridExtra)
grid.arrange(pa, pb,ncol=2)
require(gridExtra)
png("sim_lda.png",width = 900,height=440)
grid.arrange(pa, pb,ncol=2)
dev.off()
grid.arrange(pa, pb,ncol=2)
kl_vb
kl_hmc
t=1
kl_t2_hmc= c(kl_hmc_1[t,],kl_hmc_2[t,],kl_hmc_3[t,],kl_hmc_4[t,],kl_hmc_5[t,],kl_hmc_6[t,],kl_hmc_7[t,])
kl_t2_vb= c(kl_vb_1[t,],kl_vb_2[t,],kl_vb_3[t,],kl_vb_4[t,],kl_vb_5[t,],kl_vb_6[t,],kl_vb_7[t,])
KL<-c(kl_t2_hmc,kl_t2_vb)
group=c(rep(c("10","20","50","100","200","500","1000"), each=2000),rep(c("10","20","50","100","200","500","1000"), each=1000))
method<-c(rep("HMC", each = 7*2000),rep("MFVB",each=7*1000))
data<-data.frame(KL,group,method)
names(data)<-c("KL","M","Algo")
data$M <- factor(group,levels = c("10","20","50","100","200","500","1000"))
pc<-ggplot(data=data, aes(x=M,y=KL,fill=method)) + geom_boxplot()  + scale_fill_manual(values=c("lightskyblue2","dodgerblue4" ) ) + theme_light()
t=8
kl_t2_hmc= c(kl_hmc_1[t,],kl_hmc_2[t,],kl_hmc_3[t,],kl_hmc_4[t,],kl_hmc_5[t,],kl_hmc_6[t,],kl_hmc_7[t,])
kl_t2_vb= c(kl_vb_1[t,],kl_vb_2[t,],kl_vb_3[t,],kl_vb_4[t,],kl_vb_5[t,],kl_vb_6[t,],kl_vb_7[t,])
KL<-c(kl_t2_hmc,kl_t2_vb)
group=c(rep(c("10","20","50","100","200","500","1000"), each=2000),rep(c("10","20","50","100","200","500","1000"), each=1000))
method<-c(rep("HMC", each = 7*2000),rep("MFVB",each=7*1000))
data<-data.frame(KL,group,method)
names(data)<-c("KL","M","Algo")
data$M <- factor(group,levels = c("10","20","50","100","200","500","1000"))
pd<-ggplot(data=data, aes(x=M,y=KL,fill=method)) + geom_boxplot()  + scale_fill_manual(values=c("lightskyblue2","dodgerblue4" ) ) + theme_light()
require(gridExtra)
png("sim_lda_t1_t8.png",width = 900,height=440)
grid.arrange(pc, pd,ncol=2)
dev.off()
grid.arrange(pc, pd,ncol=2)
save.image("~/Documents/OneDrive - University of North Carolina at Chapel Hill/STAT Program/2020 Spring/STOR 757/Project/VB_1_1.RData")
install.packages(c("randomForest", "xgboost"))
knitr::opts_chunk$set(echo = TRUE)
n = 100              # number of sampels
x <- rbeta(n*50,1,1) # upperstream 25 probes and downstream 25 probes measured by HM450
y <- rbeta(n,1,1)    # the target HM850 probe
# hist(x)
# hist(y)
x <- matrix(rbeta(n*50,1,1),ncol=n) # upperstream 25 probes and downstream 25 probes measured by HM450
Meth<-data.frame(cbind(y,x))
Meth<-data.frame(cbind(y,t(x)))
train=1:80
test=81:100
knn=knn(train = Meth[train,2:dim(x)[1]],
test = Meth[test,2:dim(x)[1]],
cl = Meth[train,1],
k=50,
prob=T)
library("class")
knn=knn(train = Meth[train,2:dim(x)[1]],
test = Meth[test,2:dim(x)[1]],
cl = Meth[train,1],
k=50,
prob=T)
pred<-as.numeric(as.matrix(knn))
library(xgboost)
library(xgboost)
bst <- xgboost(data = t(x[,train]),
label = y[train],
#ax.depth = 2, eta = 1,
thread = 1, nrounds = 10,
objective = "reg:linear",verbose = 0)
pred_test<-predict(bst,t(x[,test]))
library(randomForest)
rf=randomForest(as.formula(paste("y~.")), data = Meth, subset=trai
n ,mty=5,ntree=10)
rf=randomForest(as.formula(paste("y~.")), data = Meth, subset=train ,mty=5,ntree=10)
pred_test<-predict(rf,Meth[test,2:(dim(Meth)[2])])
y[y>0.5]=1;y[y<=0.5]=0;
Meth<-data.frame(cbind(y,t(x)))
logit=glm(as.formula(paste("y~.")),Meth[train,],family = binomial)
pred_test<-predict(logit,Meth[test,],type = "response")
source("refund_lib.R")
library(shiny); runApp('Documents/GitHub/CUE/R/CUE_QC.R')
knitr::opts_chunk$set(echo = TRUE)
source("R/refund_lib.R")
runApp('Documents/GitHub/CUE/CUE_QC.R')
QC_probe_lsit_probes<-read.csv("Placenta (ELGAN)QC_probe_list.csv")
setwd("~/Documents/GitHub/CUE")
QC_probes<-read.csv("Placenta (ELGAN)QC_probe_list.csv")
load("y_impute.RData")
